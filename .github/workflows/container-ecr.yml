name: "Publish ECR & Terraform AppRunner"

on:
  push:
    branches:
      - main

jobs:
  # Builds a new container image, and pushes it on every commit to the repository
  # Also pushes a tag called "latest" to track the lates commit

  build_docker_image:
    name: Push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Build and push Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          rev=$(git rev-parse --short HEAD)
          docker build . -t ppe
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/kand2035:$rev
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/kand2035:latest
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/kand2035:$rev
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/kand2035:latest

  terraform:
     name: "Terraform"
     needs: build_docker_image
     runs-on: ubuntu-latest
     defaults:
       run:
         working-directory: ./infra
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       AWS_REGION: eu-west-1
       TF_VAR_EMAIL_FOR_ALARM: ${{ vars.TF_VAR_EMAIL_FOR_ALARM }}
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     steps:
       - uses: actions/checkout@v3
       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2

       - name: Terraform Init
         id: init
         run: terraform init

       - name: Terraform Plan
         id: plan
         run: terraform plan -no-color
         continue-on-error: true

       - name: Terraform Plan Status
         if: steps.plan.outcome == 'failure'
         run: exit 1

       - name: Terraform Apply
         id: terra_apply
         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
         run: |
           terraform apply -auto-approve
           APPRUNNER_URL=$(terraform output -raw apprunner_service_url)
           echo "apprunner_url=$APPRUNNER_URL" >> $GITHUB_OUTPUT
           echo "::set-output name=rev_tag::$(git rev-parse --short HEAD)"

       - name: Create release
         id: create_release
         uses: actions/create-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
         with:
           tag_name: ${{ steps.terra_apply.outputs.rev_tag }}
           release_name: Release ${{ github.ref }}
           body: Public AppRunner url ${{ steps.terra_apply.outputs.apprunner_url  }}
           draft: false
           prerelease: false